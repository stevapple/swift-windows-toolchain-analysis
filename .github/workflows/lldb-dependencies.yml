name: Collect LLDB dependencies
on:
  workflow_dispatch:
  schedule:
    - cron: '0 8 * * *' # Every day

permissions:
  contents: write

concurrency: repo_update

jobs:
  sync:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main
      - name: Checkout Swift.org
        uses: actions/checkout@v4
        with:
          repository: apple/swift-org-website
          path: swift-org
      - name: Setup yq
        uses: vegardit/gha-setup-yq@v1
      - name: Get Swift release tags
        id: swift-release
        shell: bash
        run: |
          swift_release_tags=$(yq eval '.[] | select(.platforms[].name == "Windows 10") | .tag' swift-org/_data/builds/swift_releases.yml)
          readarray -t swift_release_tags_array <<< "$swift_release_tags"
          echo "tags=${swift_release_tags_array[*]}" >> $GITHUB_OUTPUT
      - name: Setup Python 3.5
        uses: actions/setup-python@v4
        with:
          python-version: '3.5'
      - name: Setup Python 3.6
        uses: actions/setup-python@v4
        with:
          python-version: '3.6'
      - name: Setup Python 3.7
        uses: actions/setup-python@v4
        with:
          python-version: '3.7'
      - name: Setup Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'
      - name: Setup Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Setup Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Setup Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Setup Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Set up Visual Studio shell
        uses: egor-tensin/vs-shell@v2
      - name: Download and set up WiX v4
        id: setup-wix
        run: |
          # Download and extract WiX v4 from NuGet
          $wixPath = Join-Path $env:TEMP wix4
          $wixArchivePath = Join-Path $env:TEMP wix4.nupkg.zip
          Invoke-WebRequest -Uri "https://www.nuget.org/api/v2/package/wix" -OutFile $wixArchivePath
          Expand-Archive -Path $wixArchivePath -DestinationPath $wixPath -Force

          # Set up global cache directory
          $installerExtractPath = Join-Path $env:TEMP cache
          $toolchainExtractPath = Join-Path $env:TEMP toolchain
          if (!(Test-Path -Path $installerExtractPath -PathType Container)) {
            New-Item -Path $installerExtractPath -ItemType Directory
          }
          if (!(Test-Path -Path $toolchainExtractPath -PathType Container)) {
            New-Item -Path $toolchainExtractPath -ItemType Directory
          }

          # Save WiX executable path to output
          $wixPath = Join-Path $env:TEMP wix4 tools net6.0 any wix.exe
          "path=$wixPath" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
      - name: Collect LLDB dependencies
        id: collect
        env:
          SWIFT_TAGS: ${{ steps.swift-release.outputs.tags }}
          WIX_PATH: ${{ steps.setup-wix.outputs.path }}
        run: |
          # Read in Swift on Windows release tags
          Write-Output "::group::Fetch Swift on Windows release tags"
          $tags = $env:SWIFT_TAGS -split ' '
          $wixPath = $env:WIX_PATH
          Write-Output "Find $($tags.count) Swift on Windows releases."
          Write-Output "::endgroup::"
          $collectedTags = @()

          # Repeat for each Swift on Windows release
          foreach ($tag in $tags) {
            # Check if the manifest directory exists and create it if not
            $manifestPath = ".\$($tag)"
            $lldbDependencyPath = Join-Path $manifestPath lldb-dependencies.txt
            if (!(Test-Path -Path $manifestPath -PathType Container)) {
              Write-Output "::group::Create directory for $tag"
              New-Item -Path $manifestPath -ItemType Directory
              Write-Output "::endgroup::"
            } elseif (Test-Path -Path $lldbDependencyPath) {
              # LLDB dependency file already exists
              continue
            }

            # Compose URL and download the installer
            Write-Output "::group::Download $tag installer"
            $url = "https://download.swift.org/$($tag.ToLower())/windows10/$tag/$tag-windows10.exe"
            $installerPath = Join-Path $env:TEMP "$tag-windows10.exe"
            Invoke-WebRequest -Uri $url -OutFile $installerPath
            Write-Output "::endgroup::"

            # Extract and install the toolchain
            Write-Output "::group::Install $tag toolchain"
            $installerExtractPath = Join-Path $env:TEMP cache $tag
            & $wixPath burn extract $installerPath -o $installerExtractPath
            $toolchainExtractPath = Join-Path $env:TEMP toolchain $tag
            $msiFiles = Get-ChildItem -Path $installerExtractPath -File
            foreach ($msiFile in $msiFiles) {
              & msiexec.exe /i $($msiFile.FullName) /qn INSTALLDIR=$toolchainExtractPath | Write-Verbose
            }
            Write-Output "::endgroup::"

            # Dump and save the DLL dependencies
            Write-Output "::group::Dump LLDB dependencies for $tag"
            $libLLDBPath = "$toolchainExtractPath\Library\Developer\Toolchains\unknown-Asserts-development.xctoolchain\usr\bin\liblldb.dll"
            & dumpbin.exe /DEPENDENTS $libLLDBPath | Out-File -FilePath $lldbDependencyPath

            # Collect the result only if dumpbin succeed
            if ($?) {
              $collectedTags += $tag
            }
            Write-Output "::endgroup::"
          }

          # Record all collected Swift release tags
          $collectedTagsString = $collectedTags -join ' '
          "tags=$collectedTagsString" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
      - name: Calculate commit information
        id: commit-info
        env:
          SWIFT_TAGS: ${{ steps.collect.outputs.tags }}
        run: |
          $tags = $env:SWIFT_TAGS -split ' '
          $paths = @()
          foreach ($tag in $tags) {
            $paths += "./$tag/lldb-dependencies.txt"
          }
          "paths=$($paths -join ' ')" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          switch ($tags.count) {
            0 {
              "updated=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
              break
            }
            1 {
              "updated=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
              "message=Update LLDB dependencies for $($tags[0])" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
              break
            }
            default {
              "updated=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
              "message<<EOF" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
              "Update LLDB dependencies for $($tags.count) releases" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
              "" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
              foreach ($tag in $tags) {
                "* $tag" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
              }
              "EOF" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            }
          }
      - name: Commit and push
        uses: EndBug/add-and-commit@v9
        if: ${{ steps.commit-info.outputs.updated }}
        with:
          add: ${{ steps.commit-info.outputs.paths }}
          message: ${{ steps.commit-info.outputs.message }}
          default_author: github_actions
          push: true
